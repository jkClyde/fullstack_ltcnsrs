import React, { useState, useEffect } from 'react';
import lengthForAgeStatus from './lengthForAgeStatus';
import weightForAgeStatus from './weightForAgeStatus';
import weigthForLengthStatus from './weightForLengthStatus';
import axios from 'axios';

const getLatestQuarter = () => {
  const currentDate = new Date();
  const currentYear = currentDate.getFullYear();
  const currentMonth = currentDate.getMonth() + 1; // Months are zero-based

  let quarter;

  if (currentMonth <= 3) {
    quarter = '1st Quarter';
  } else if (currentMonth <= 6) {
    quarter = '2nd Quarter';
  } else if (currentMonth <= 9) {
    quarter = '3rd Quarter';
  } else {
    quarter = '4th Quarter';
  }

  return { year: currentYear, quarter };
};

const Statistics = () => {
  const [lfa_severe, set_LFA_severe] = useState(0);
  const [lfa_stunted, set_LFA_stunted] = useState(0);
  const [lfa_normal, set_LFA_normal] = useState(0);
  const [lfa_tall, set_LFA_tall] = useState(0);

  const [wfa_severe, set_WFA_severe] = useState(0);
  const [wfa_underweight, set_WFA_underweight] = useState(0);
  const [wfa_normal, set_WFA_normal] = useState(0);
  const [wfa_overweight, set_WFA_overweight] = useState(0);

  const [wfl_severe, set_WFL_severe] = useState(0);
  const [wfl_wasted, set_WFL_wasted] = useState(0);
  const [wfl_normal, set_WFL_normal] = useState(0);
  const [wfl_overweight, set_WFL_overweight] = useState(0);
  const [wfl_obese, set_WFL_obese] = useState(0);

  const [data, setData] = useState(null);
  const latestQuarter = getLatestQuarter();
  const [dataProcessed, setDataProcessed] = useState(false);
  const [population, setPopulation] = useState(0)
  const [barangayStats, setBarangayStats] = useState({});


  useEffect(() => {
    const fetchData = async () => {
      try {
        const primaryChildResponse = await axios.get('http://127.0.0.1:8000/primarychild/');
        const childHealthInfoResponse = await axios.get('http://127.0.0.1:8000/childhealthinfo/');

        const mergedData = primaryChildResponse.data.map((child) => ({
          ...child,
          ...childHealthInfoResponse.data.find((healthInfo) => healthInfo.child === child.id),
        }));

        setData(mergedData);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    if (data) {
      console.log('Fetched Data:', data);

      if (!dataProcessed) {
        data.forEach((patient) => {
          const barangayStatsCopy = {}; // Create a copy of barangayStats
          const latestQuarter = getLatestQuarter();
          if (patient.quarter === latestQuarter.quarter && patient.year === latestQuarter.year) {
            const lfa_status = lengthForAgeStatus(patient.birthdate, patient.height, patient.gender);
            const wfa_status = weightForAgeStatus(patient.birthdate, patient.height, patient.gender);
            const wfl_status = weigthForLengthStatus(patient.birthdate, patient.height, patient.weight, patient.gender);
            setPopulation((prev) => prev + 1)

            switch (lfa_status) {
              case 'Severely Stunted':
                set_LFA_severe((prev) => prev + 1);
                break;
              case 'Stunted':
                set_LFA_stunted((prev) => prev + 1);
                break;
              case 'Normal':
                set_LFA_normal((prev) => prev + 1);
                break;
              case 'Tall':
                set_LFA_tall((prev) => prev + 1);
                break;
              default:
                break;
            }

            switch (wfa_status) {
              case 'Severely Underweight':
                set_WFA_severe((prev) => prev + 1);
                break;
              case 'Underweight':
                set_WFA_underweight((prev) => prev + 1);
                break;
              case 'Normal':
                set_WFA_normal((prev) => prev + 1);
                break;
              case 'Overweight':
                set_WFA_overweight((prev) => prev + 1);
                break;
              default:
                break;
            }

            switch (wfl_status) {
              case 'Severely Wasted':
                set_WFL_severe((prev) => prev + 1);
                break;
              case 'Wasted':
                set_WFL_wasted((prev) => prev + 1);
                break;
              case 'Normal':
                set_WFL_normal((prev) => prev + 1);
                break;
              case 'Overweight':
                set_WFL_overweight((prev) => prev + 1);
                break;
              case 'Obese':
                set_WFL_obese((prev) => prev + 1);
                break;
              case 'Height not found':
                console.log('Height not found');
                break;
              default:
                console.log(wfl_status);
                break;
            }
          }
        });

        setDataProcessed(true);
      }
    }
  }, [data]);

  // Return the relevant data
  return {
    lfa_severe,
    lfa_stunted,
    lfa_normal,
    lfa_tall,
    wfa_severe,
    wfa_underweight,
    wfa_normal,
    wfa_overweight,
    wfl_severe,
    wfl_wasted,
    wfl_normal,
    wfl_overweight,
    wfl_obese,
    population
  };
};

export default Statistics;
